// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	CreateShorten(ctx context.Context, in *CreateShortenRequest, opts ...grpc.CallOption) (*CreateShortenResponse, error)
	GetShorten(ctx context.Context, in *GetShortenRequest, opts ...grpc.CallOption) (*GetShortenResponse, error)
	GetPing(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*GetPingResponse, error)
	CreateShortenBatch(ctx context.Context, in *CreateShortenBatchRequest, opts ...grpc.CallOption) (*CreateShortenBatchResponse, error)
	GetAllShortens(ctx context.Context, in *GetAllShortensRequest, opts ...grpc.CallOption) (*GetAllShortensResponse, error)
	DeleteShortens(ctx context.Context, in *DeleteShortensRequest, opts ...grpc.CallOption) (*DeleteShortensResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) CreateShorten(ctx context.Context, in *CreateShortenRequest, opts ...grpc.CallOption) (*CreateShortenResponse, error) {
	out := new(CreateShortenResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/CreateShorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetShorten(ctx context.Context, in *GetShortenRequest, opts ...grpc.CallOption) (*GetShortenResponse, error) {
	out := new(GetShortenResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetShorten", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetPing(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*GetPingResponse, error) {
	out := new(GetPingResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CreateShortenBatch(ctx context.Context, in *CreateShortenBatchRequest, opts ...grpc.CallOption) (*CreateShortenBatchResponse, error) {
	out := new(CreateShortenBatchResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/CreateShortenBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAllShortens(ctx context.Context, in *GetAllShortensRequest, opts ...grpc.CallOption) (*GetAllShortensResponse, error) {
	out := new(GetAllShortensResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetAllShortens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteShortens(ctx context.Context, in *DeleteShortensRequest, opts ...grpc.CallOption) (*DeleteShortensResponse, error) {
	out := new(DeleteShortensResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/DeleteShortens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	CreateShorten(context.Context, *CreateShortenRequest) (*CreateShortenResponse, error)
	GetShorten(context.Context, *GetShortenRequest) (*GetShortenResponse, error)
	GetPing(context.Context, *GetPingRequest) (*GetPingResponse, error)
	CreateShortenBatch(context.Context, *CreateShortenBatchRequest) (*CreateShortenBatchResponse, error)
	GetAllShortens(context.Context, *GetAllShortensRequest) (*GetAllShortensResponse, error)
	DeleteShortens(context.Context, *DeleteShortensRequest) (*DeleteShortensResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) CreateShorten(context.Context, *CreateShortenRequest) (*CreateShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShorten not implemented")
}
func (UnimplementedShortenerServer) GetShorten(context.Context, *GetShortenRequest) (*GetShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShorten not implemented")
}
func (UnimplementedShortenerServer) GetPing(context.Context, *GetPingRequest) (*GetPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPing not implemented")
}
func (UnimplementedShortenerServer) CreateShortenBatch(context.Context, *CreateShortenBatchRequest) (*CreateShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenBatch not implemented")
}
func (UnimplementedShortenerServer) GetAllShortens(context.Context, *GetAllShortensRequest) (*GetAllShortensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShortens not implemented")
}
func (UnimplementedShortenerServer) DeleteShortens(context.Context, *DeleteShortensRequest) (*DeleteShortensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortens not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_CreateShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/CreateShorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateShorten(ctx, req.(*CreateShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetShorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetShorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetShorten",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetShorten(ctx, req.(*GetShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetPing(ctx, req.(*GetPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CreateShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/CreateShortenBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateShortenBatch(ctx, req.(*CreateShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAllShortens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllShortensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAllShortens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetAllShortens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAllShortens(ctx, req.(*GetAllShortensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteShortens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteShortens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/DeleteShortens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteShortens(ctx, req.(*DeleteShortensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShorten",
			Handler:    _Shortener_CreateShorten_Handler,
		},
		{
			MethodName: "GetShorten",
			Handler:    _Shortener_GetShorten_Handler,
		},
		{
			MethodName: "GetPing",
			Handler:    _Shortener_GetPing_Handler,
		},
		{
			MethodName: "CreateShortenBatch",
			Handler:    _Shortener_CreateShortenBatch_Handler,
		},
		{
			MethodName: "GetAllShortens",
			Handler:    _Shortener_GetAllShortens_Handler,
		},
		{
			MethodName: "DeleteShortens",
			Handler:    _Shortener_DeleteShortens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
